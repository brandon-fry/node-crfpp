/**
* Test file for the public facing API exposed in CrfTest. Execute with 'npm run test'.
*
* Tests are ran against the generated model_file in this directory. The model_file
* was generated by manually running crf_learn with the train_file and template_file
* in this directory.
*/

const CrfTest = require("../src/node-crfpp").CrfTest;
const assert = require("assert");
const path = require('path');

assert(CrfTest, "The expected module is undefined");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------
const testInput = ["This", "Is", "A", "Test"];

function checkDecodeData(data) {
  let valid = !Number.isNaN(data.overallConfidence);
  valid = valid && data.taggedData;
  valid = valid && data.taggedData.length === testInput.length;
  valid = valid && data.taggedData[0].word;
  valid = valid && data.taggedData[0].tag;
  valid = valid && !Number.isNaN(data.taggedData[0].confidence);

  return valid;
}

function checkDecodeNbestData(data, nLevel) {
  let valid = data.length === nLevel;
  for(let i = 0; valid && i < data.length; ++i) {
    valid = checkDecodeData(data[i]);
  };

  return valid;
}

function checkDecodeToTagsListData(data) {
  let valid = !Number.isNaN(data.avgTagConfidence);
  valid = valid && !Number.isNaN(data.overallConfidence);
  // Tags defined in train_file
  valid = valid && typeof(data.tags.WORD_1) === "string";
  valid = valid && typeof(data.tags.WORD_2) === "string";
  valid = valid && typeof(data.tags.WORD_3) === "string";
  valid = valid && typeof(data.tags.WORD_4) === "string";

  return valid;
}

function checkDecodeToTagsListNbestData(data, nLevel) {
  let valid = data.length === nLevel;
  for(let i = 0; valid && i < data.length; ++i) {
    valid = checkDecodeToTagsListData(data[i]);
  };

  return valid;
}

function getClassifier(vLevel, nLevel) {
  const modelPath = path.resolve('./test/model_file');

  if (vLevel && nLevel) {
    return new CrfTest(`-m ${modelPath} -v${vLevel} -n${nLevel}`);
  } else if (vLevel && !nLevel){
    return new CrfTest(`-m ${modelPath} -v${vLevel}`);
  } else if (!vLevel && nLevel) {
    return new CrfTest(`-m ${modelPath} -n${nLevel}`);
  } else {
    return new CrfTest(`-m ${modelPath}`);
  }
}

//------------------------------------------------------------------------------
// Test constructor
//------------------------------------------------------------------------------
assert.throws(() => new CrfTest(), undefined, "Empty construction did not throw");
assert.throws(() => new CrfTest(2), undefined, "Invalid construction did not throw");
assert.throws(() => new CrfTest("-m ./path"), undefined, "Invalid string arguments did not throw");
assert.doesNotThrow(() => getClassifier(), undefined, "Construction failed");

//------------------------------------------------------------------------------
// Test decode
//------------------------------------------------------------------------------
assert.throws(() => getClassifier().decode(), undefined, "decode() did not throw");
assert.throws(() => getClassifier().decode(2), undefined, "decode(int) did not throw");
assert.doesNotThrow(() => getClassifier().decode([]), undefined, "decode([]) threw exception");
assert.ok((() => {
  const classifier = getClassifier();
  const result = classifier.decode(testInput);
  console.log(result, '\n');
  return checkDecodeData(result);
})(), undefined, "decode returned unexpected result");

//------------------------------------------------------------------------------
// Test decodeNbest
//------------------------------------------------------------------------------
assert.throws(() => getClassifier().decodeNbest(), undefined, "decodeNbest() did not throw");
assert.throws(() => getClassifier().decodeNbest(2), undefined, "decodeNbest(int) did not throw");
assert.doesNotThrow(() => getClassifier().decodeNbest([]), undefined, "decodeNbest([]) threw exception");
assert.ok((() => {
  const classifier = getClassifier(1, 2);
  const result = classifier.decodeNbest(testInput);
  console.log(result, '\n');
  return checkDecodeNbestData(result, 2);
})(), undefined, "decodeNbest returned unexpected result");

//------------------------------------------------------------------------------
// Test decodeBestTag
//------------------------------------------------------------------------------
assert.throws(() => getClassifier().decodeBestTag(), undefined, "decodeBestTag() did not throw");
assert.throws(() => getClassifier().decodeBestTag(2), undefined, "decodeBestTag(int) did not throw");
assert.doesNotThrow(() => getClassifier().decodeBestTag([]), undefined, "decodeBestTag([]) threw exception");
assert.ok((() => {
  const classifier = getClassifier();
  const result = classifier.decodeBestTag(testInput);
  console.log(result, '\n');
  return checkDecodeData(result);
})(), undefined, "decodeBestTag returned unexpected result");

//------------------------------------------------------------------------------
// Test decodeToTagsList
//------------------------------------------------------------------------------
assert.throws(() => getClassifier().decodeToTagsList(), undefined, "decodeToTagsList() did not throw");
assert.throws(() => getClassifier().decodeToTagsList(2), undefined, "decodeToTagsList(int) did not throw");
assert.doesNotThrow(() => getClassifier().decodeToTagsList([]), undefined, "decodeToTagsList([]) threw exception");
assert.ok((() => {
  const classifier = getClassifier();
  const result = classifier.decodeToTagsList(testInput);
  console.log(result, '\n');
  return checkDecodeToTagsListData(result);
})(), undefined, "decodeToTagsList returned unexpected result");

//------------------------------------------------------------------------------
// Test decodeToTagsListNbest
//------------------------------------------------------------------------------
assert.throws(() => getClassifier().decodeToTagsListNbest(), undefined, "decodeToTagsListNbest() did not throw");
assert.throws(() => getClassifier().decodeToTagsListNbest(2), undefined, "decodeToTagsListNbest(int) did not throw");
assert.doesNotThrow(() => getClassifier().decodeToTagsListNbest([]), undefined, "decodeToTagsListNbest([]) threw exception");
assert.ok((() => {
  const classifier = getClassifier(1, 2);
  const result = classifier.decodeToTagsListNbest(testInput);
  console.log(result, '\n');
  return checkDecodeToTagsListNbestData(result, 2);
})(), undefined, "decodeToTagsList returned unexpected result");

//------------------------------------------------------------------------------
// Test toString
//------------------------------------------------------------------------------
assert.throws(() => getClassifier().toString(), undefined, "toString() did not throw");
assert.throws(() => getClassifier().decodeToTagsListNbest(2), undefined, "toString(int) did not throw");
assert.doesNotThrow(() => getClassifier().decodeToTagsListNbest([]), undefined, "toString([]) threw exception");
assert.ok((() => {
  const classifier = getClassifier(2, 0);
  const result = classifier.toString(testInput);
  console.log(result, '\n');
  return typeof(result) === "string";
})(), undefined, "toString returned unexpected result");


//------------------------------------------------------------------------------
// Done
//------------------------------------------------------------------------------
console.log("Tests passed- everything looks OK!");
